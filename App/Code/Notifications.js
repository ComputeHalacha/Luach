import PushNotification from 'react-native-push-notification';
import DeviceInfo from 'react-native-device-info';
import { TaharaEventType } from './Chashavshavon/TaharaEvent';
import Utils from './JCal/Utils';
import { GLOBALS, log, range } from './GeneralUtils';

export function configureNotifier(onRegister, onNotification) {
    log('PushNotification.configure is being called.');

    PushNotification.configure({
        // (optional) Called when Token is generated (iOS and Android)
        onRegister: function(token) {
            log('PushNotification.onRegister called: TOKEN: ', token);
            if (onRegister) {
                onRegister(token);
            }
        },

        // (required) Called when a remote or local notification is opened or received
        onNotification: async function(notification) {
            log(
                'PushNotification.OnNotification being called: NOTIFICATION: ' +
                    JSON.stringify(notification)
            );
            if (onNotification) {
                onNotification(notification);
            }
            if (GLOBALS.IS_IOS) {
                notification.finish(PushNotification.FetchResult.NoData);
            }
        },
        permissions: {
            alert: true,
            badge: true,
            sound: true,
        },
        popInitialNotification: true,
        requestPermissions: true,
    });
}

/**
 * Adds a system local scheduled notification
 * @param {Number} id
 * @param {String} title
 * @param {String} message
 * @param {Date} date
 */
export function addNotification(id, title, message, date) {
    if (date.getTime() < new Date().getTime()) {
        log(
            'PushNotification.localNotificationSchedule  - notification date is after the curren date. No notificatio will be scheduled.' +
                JSON.stringify({ id, title, message, date })
        );
    } else {
        PushNotification.localNotificationSchedule({
            date,
            message,
            id: id.toString(), // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            userInfo: { id: id.toString() },
            ticker: 'Luach Alarm',
            autoCancel: true,
            largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
            smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: message,
            subText: title,
            //color: '@android:color/scroll', // (optional) default: system default
            vibrate: true,
            vibration: 1000,
            tag: title, // (optional) add tag to message
            group: 'Luach Reminders', // (optional) add group to message
            ongoing: false,
            priority: 'high',
            visibility: 'private',
            importance: 'high',
            alertAction: 'view', // (optional) default: view
            category: null, // (optional) default: null
            title: title,
            playSound: true,
            soundName: 'default',
            number: '10',
            //repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
            actions: '[]',
        });
        log(
            'PushNotification.localNotificationSchedule ' +
                JSON.stringify({ id, title, message, date })
        );
    }
}

/**
 *
 * @param {id:number} id
 */
export function cancelAlarm(id) {
    PushNotification.cancelLocalNotifications({
        id: id.toString(),
    });
}

/**
 *
 * @param {taharaEventId:number} id
 */
export function cancelAllBedikaAndMikvaAlarms(taharaEventId) {
    for (let i of range(20)) {
        try {
            cancelAlarm(`${TaharaEventType.Hefsek}${taharaEventId}${i}`);
        } catch (e) {
            /*Nu, nu*/
        }
    }
}

/**
 * Cancels the "Do a Hefsek" reminder (if available)
 */
export function cancelHefsekTaharaAlarm() {
    try {
        cancelAlarm(TaharaEventType.Hefsek);
    } catch (e) {
        /*Nu, nu*/
    }
}

/**
 *
 * @param {JDate} jdate
 * @param {{hour:Number, minute:Number}} time
 * @param {{hour:Number, minute:Number}} sunset
 * @param  {discreet:Boolean} discreet
 */
export function addHefsekTaharaAlarm(jdate, time, sunset, discreet) {
    const hefsekText = discreet ? 'H.T.' : 'Hefsek Tahara',
        sdate = jdate.getDate();
    sdate.setHours(time.hour, time.minute, 0);

    cancelHefsekTaharaAlarm();
    addNotification(
        TaharaEventType.Hefsek,
        `LUach - ${hefsekText} Reminder`,
        `A  ${hefsekText} may be possible today before shkiah.\nSunset today is at ${Utils.getTimeString(
            sunset,
            DeviceInfo.is24Hour
        )}.`,
        sdate
    );
}
